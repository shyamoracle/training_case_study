package com.oracle.pmsitis;

import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;



import org.glassfish.jersey.server.ResourceConfig;

public class ApplicationResourceConfiguration extends ResourceConfig {
	public static final Properties DB_SETTINGS = new Properties();
	public static final Properties DB_QUERIES = new Properties();
	
	private static final String DB_SETTINGS_RESOURCE_NAME = "database.properties";
	private static final String DB_QUERIES_RESOURCE_NAME = "dbquery.properties";
	
	public ApplicationResourceConfiguration() throws IOException {

		this.register(new ApplicationServicesBinderConfiguration());
		loadFromPropertiesFile(DB_SETTINGS_RESOURCE_NAME, DB_SETTINGS);
		loadFromPropertiesFile(DB_QUERIES_RESOURCE_NAME, DB_QUERIES);
	}
	package com.oracle.pmsitis;

	import java.io.IOException;
	import java.io.InputStream;
	import java.util.Properties;

	import org.glassfish.jersey.server.ResourceConfig;

	public class ApplicationResourceConfiguration extends ResourceConfig {

	    public static final Properties DB_SETTINGS = new Properties();
	    public static final Properties DB_QUERIES = new Properties();

	    private static final String DB_SETTINGS_RESOURCE_NAME = "database.properties";
	    private static final String DB_QUERIES_RESOURCE_NAME = "dbquery.properties";

	    public ApplicationResourceConfiguration() throws IOException {
	        register(new ApplicationServicesBinderConfiguration());
	        packages("com.oracle.pmsitis"); // Make sure your REST controllers are scanned
	        loadFromPropertiesFile(DB_SETTINGS_RESOURCE_NAME, DB_SETTINGS);
	        loadFromPropertiesFile(DB_QUERIES_RESOURCE_NAME, DB_QUERIES);
	    }

	    public void loadFromPropertiesFile(String resourceName, Properties properties) throws IOException {
	        InputStream stream = getClass().getClassLoader().getResourceAsStream(resourceName);
	        if (stream == null) {
	            throw new IOException("❌ Resource not found: " + resourceName);
	        }
	        properties.load(stream);
	    }

	    // Utility method for DB connection
	    public static java.sql.Connection getConnection() throws Exception {
	        Class.forName(DB_SETTINGS.getProperty("driver"));
	        return java.sql.DriverManager.getConnection(
	                DB_SETTINGS.getProperty("url"),
	                DB_SETTINGS.getProperty("username"),
	                DB_SETTINGS.getProperty("password")
	        );
	    }

	    // Allow updating DB credentials at runtime
	    public static void updateDbCredentials(String username, String password) {
	        DB_SETTINGS.setProperty("username", username);
	        DB_SETTINGS.setProperty("password", password);
	    }
	}

	public void loadFromPropertiesFile(String resourceName, Properties properties) throws IOException {
	    InputStream stream = null;
	    try {
	        Class<?> clsInfo = (Class<?>) this.getClass();
	        ClassLoader loader = clsInfo.getClassLoader();
	        stream = loader.getResourceAsStream(resourceName);
	        if (stream == null) {
	            throw new IOException("❌ Resource not found: " + resourceName);
	        }
	        properties.load(stream);

	        System.out.println("✅ Loaded properties from " + resourceName);
	        properties.forEach((k, v) -> System.out.println(k + " = " + v));

	    } catch (IOException e) {
	        throw e;
	    } catch (Exception e) {
	        throw e;
	    } finally {
	        if (stream != null)
	            stream.close();
	    }
	}

	

}

