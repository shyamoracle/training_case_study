package com.oracle.pmsitis.repository;


import static com.oracle.pmsitis.ApplicationResourceConfiguration.DB_QUERIES;
import static com.oracle.pmsitis.repository.utilities.DaoUtility.createConnection;
import static com.oracle.pmsitis.repository.utilities.DaoUtility.closeConnection;
import static com.oracle.pmsitis.repository.utilities.DaoUtility.convertRecordToModel;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.oracle.pmsitis.models.ProductModel;


public class ProductRepository implements RepositoryContract<ProductModel, Integer>{

	@Override
	public ProductModel insert(ProductModel data) throws Exception {
		Connection connection = null;
		PreparedStatement statement = null;
		int result = 0;
		
		try {
			String insertQuery = DB_QUERIES.getProperty("add_product");
			if(insertQuery.isEmpty() || insertQuery.isBlank() || insertQuery == null)
				throw new Exception("no insert query found");
			 
			connection = createConnection();
			 
			statement = connection.prepareStatement(insertQuery);
			 
			statement.setInt(1, data.getProductId());
			statement.setString(2, data.getProductName());
			statement.setString(3, data.getProductDescription());
			statement.setDouble(4, data.getProductPrice());
			statement.setDate(5, Date.valueOf(data.getProductReleasedOn()));
			 
			result = statement.executeUpdate();
			 
		} catch (Exception e) {
			throw e;
		} finally {package com.oracle.pmsitis;

import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

import org.glassfish.jersey.server.ResourceConfig;

public class ApplicationResourceConfiguration extends ResourceConfig {
	public static final Properties DB_SETTINGS = new Properties();
	public static final Properties DB_QUERIES = new Properties();
	
	private static final String DB_SETTINGS_RESOURCE_NAME = "database.properties";
	private static final String DB_QUERIES_RESOURCE_NAME = "dbquery.properties";
	
	public ApplicationResourceConfiguration() throws IOException {
//		Packages will be scanned recursively, including all nested packages
//same is mentioned in the web.xml file already
		//		this.packages("com.oracle.pmsapp");
		this.register(new ApplicationServicesBinderConfiguration());
		loadFromPropertiesFile(DB_SETTINGS_RESOURCE_NAME, DB_SETTINGS);
		loadFromPropertiesFile(DB_QUERIES_RESOURCE_NAME, DB_QUERIES);
	}
	
	private void loadFromPropertiesFile(String resourceName, Properties properties) throws IOException {
	    InputStream stream = null;
	    try {
	        Class<?> clsInfo = (Class<?>) this.getClass();
	        ClassLoader loader = clsInfo.getClassLoader();
	        stream = loader.getResourceAsStream(resourceName);
	        if (stream == null) {
	            throw new IOException("❌ Resource not found: " + resourceName);
	        }
	        properties.load(stream);

	        System.out.println("✅ Loaded properties from " + resourceName);
	        properties.forEach((k, v) -> System.out.println(k + " = " + v));

	    } catch (IOException e) {
	        throw e;
	    } catch (Exception e) {
	        throw e;
	    } finally {
	        if (stream != null)
	            stream.close();
	    }
	}

	
//	private void loadDbSettings() throws Exception {
//		InputStream stream = null;
//		Class<ApplicationResourceConfiguration> clsInfo = (Class<ApplicationResourceConfiguration>);
//		
////		getCLassLoader() method returns the instance of the ClassLoader which
////		will be used to load the current class in the JVM runtime
//		ClassLoader loader = clsInfo.getClassLoader();
//		
////		getResourceAsStream() method returns an input stream
//		InputStream stream = loader.getResourceAsStream("database.properties");
////		InputStream stream = this.getClass().getClassLoader();
//	}
	
}


			statement.close();
			closeConnection(connection);
		}
		return result > 0 ? data : null;
	}

	@Override
	public ProductModel remove(Integer id) throws Exception {
		Connection connection = null;
		PreparedStatement statement = null;
		int result = 0;
		ProductModel model = null;
		
		try {
			String deleteQuery = DB_QUERIES.getProperty("delete_product");
			if(deleteQuery == null || deleteQuery.isBlank() || deleteQuery.isEmpty())
				throw new Exception("no delete query found");
			
			model = get(id);

			connection = createConnection();
			statement = connection.prepareStatement(deleteQuery);
			statement.setInt(1, id);

			result = statement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			statement.close();
			closeConnection(connection);
		}
		return result > 0 ? model : null;
	}

	@Override
	public ProductModel modify(Integer id, ProductModel data) throws Exception {
		Connection connection = null;
		PreparedStatement statement = null;
		int result = 0;
		
		try {
			String updateQuery = DB_QUERIES.getProperty("update_product");
			if(updateQuery == null || updateQuery.isBlank() || updateQuery.isEmpty())
				throw new Exception("no update query found");
			
			connection = createConnection();

			statement = connection.prepareStatement(updateQuery);

			statement.setInt(5, id);
			statement.setString(1, data.getProductName());
			statement.setString(2, data.getProductDescription());
			statement.setDouble(3, data.getProductPrice());
			statement.setDate(4, Date.valueOf(data.getProductReleasedOn()));

			result = statement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			statement.close();
			closeConnection(connection);
		}
		if (result > 0) {
			data.setProductId(id);
			return data;
		} else
			return null;
	}

	@Override
	public List<ProductModel> getAll() throws Exception {
		Connection connection = null;
		Statement statement = null;
		List<ProductModel> models = null;
		ResultSet result = null;
		
		try {
			String fetchQuery = DB_QUERIES.getProperty("select_all_products");
			if(fetchQuery == null || fetchQuery.isBlank() || fetchQuery.isEmpty())
				throw new Exception("no select query found");
			
			connection = createConnection();
			statement = connection.createStatement();
			
			result = statement.executeQuery(fetchQuery);
			
			models = new ArrayList<ProductModel>();
			while (result.next()) {
				ProductModel model = convertRecordToModel(result);
				models.add(model);
			}
			
		}catch(Exception e) {
			throw e;
		}finally{
			statement.close();
			closeConnection(connection);
		}
		return models;
	}

	@Override
	public ProductModel get(Integer id) throws Exception {
		Connection connection = null;
		PreparedStatement statement = null;
		ProductModel model = null;
		ResultSet result = null;
		
		try {
			String fetchQuery = DB_QUERIES.getProperty("select_product");
			if(fetchQuery == null || fetchQuery.isBlank() || fetchQuery.isEmpty())
				throw new Exception("no select query found");
			
			connection = createConnection();
			statement = connection.prepareStatement(fetchQuery);
			statement.setInt(1, id);
			
			result = statement.executeQuery();
			while (result.next()) {
				model = convertRecordToModel(result);
				
			}
		}catch(Exception e) {
			throw e;
		}finally{
			statement.close();
			closeConnection(connection);
		}
		return model;
	}
	
}