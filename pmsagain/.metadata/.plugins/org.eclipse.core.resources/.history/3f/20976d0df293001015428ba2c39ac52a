package com.oracle.pmsitis.repository;

import static com.oracle.pmsitis.ApplicationResourceConfiguration.DB_QUERIES;
import static com.oracle.pmsitis.repository.utilities.DaoUtility.createConnection;
import static com.oracle.pmsitis.repository.utilities.DaoUtility.closeConnection;
import static com.oracle.pmsitis.repository.utilities.DaoUtility.convertRecordToModel;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.oracle.pmsitis.models.ProductModel;

package com.oracle.pmsitis.repository;

import static com.oracle.pmsitis.ApplicationResourceConfiguration.DB_QUERIES;
import static com.oracle.pmsitis.repository.utilities.DaoUtility.createConnection;
import static com.oracle.pmsitis.repository.utilities.DaoUtility.closeConnection;
import static com.oracle.pmsitis.repository.utilities.DaoUtility.convertRecordToModel;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.oracle.pmsitis.models.ProductModel;

public class ProductRepository implements RepositoryContract<ProductModel, Integer> {

    @Override
    public ProductModel insert(ProductModel data) throws Exception {
        try (Connection connection = createConnection();
             PreparedStatement statement = connection.prepareStatement(DB_QUERIES.getProperty("add_product"))) {

            String insertQuery = DB_QUERIES.getProperty("add_product");
            if (insertQuery == null || insertQuery.isBlank())
                throw new Exception("No insert query found in dbquery.properties");

            statement.setInt(1, data.getProductId());
            statement.setString(2, data.getProductName());
            statement.setString(3, data.getProductDescription());
            statement.setDouble(4, data.getProductPrice());
            statement.setDate(5, Date.valueOf(data.getProductReleasedOn()));

            int result = statement.executeUpdate();
            return result > 0 ? data : null;

        }
    }

    @Override
    public ProductModel remove(Integer id) throws Exception {
        ProductModel model = get(id);
        if (model == null) return null;

        try (Connection connection = createConnection();
             PreparedStatement statement = connection.prepareStatement(DB_QUERIES.getProperty("delete_product"))) {

            String deleteQuery = DB_QUERIES.getProperty("delete_product");
            if (deleteQuery == null || deleteQuery.isBlank())
                throw new Exception("No delete query found in dbquery.properties");

            statement.setInt(1, id);
            int result = statement.executeUpdate();
            return result > 0 ? model : null;

        }
    }

    @Override
    public ProductModel modify(Integer id, ProductModel data) throws Exception {
        try (Connection connection = createConnection();
             PreparedStatement statement = connection.prepareStatement(DB_QUERIES.getProperty("update_product"))) {

            String updateQuery = DB_QUERIES.getProperty("update_product");
            if (updateQuery == null || updateQuery.isBlank())
                throw new Exception("No update query found in dbquery.properties");

            statement.setString(1, data.getProductName());
            statement.setString(2, data.getProductDescription());
            statement.setDouble(3, data.getProductPrice());
            statement.setDate(4, Date.valueOf(data.getProductReleasedOn()));
            statement.setInt(5, id);

            int result = statement.executeUpdate();
            if (result > 0) {
                data.setProductId(id);
                return data;
            } else
                return null;

        }
    }

    @Override
    public List<ProductModel> getAll() throws Exception {
        String fetchQuery = DB_QUERIES.getProperty("select_all_products");
        if (fetchQuery == null || fetchQuery.isBlank())
            throw new Exception("No select_all_products query found in dbquery.properties");

        try (Connection connection = createConnection();
             Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery(fetchQuery)) {

            List<ProductModel> models = new ArrayList<>();
            while (resultSet.next()) {
                models.add(convertRecordToModel(resultSet));
            }
            return models;
        }
    }

    @Override
    public ProductModel get(Integer id) throws Exception {
        String fetchQuery = DB_QUERIES.getProperty("select_product");
        if (fetchQuery == null || fetchQuery.isBlank())
            throw new Exception("No select_product query found in dbquery.properties");

        try (Connection connection = createConnection();
             PreparedStatement statement = connection.prepareStatement(fetchQuery)) {

            statement.setInt(1, id);

            try (ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    return convertRecordToModel(resultSet);
                }
                return null;
            }
        }
    }
}

