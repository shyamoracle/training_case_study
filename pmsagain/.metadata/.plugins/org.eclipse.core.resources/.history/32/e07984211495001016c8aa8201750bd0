let currentSort = { column: 'productId', ascending: true };
let productsCache = [];

document.addEventListener("DOMContentLoaded", async () => {
  productsCache = await getAllProducts();

  renderTable(productsCache);
  initSearch();   // already in search.js
  initSortUI();   // handles sort dropdown + order toggle
});

function renderTable(products) {
  const tableBody = document.getElementById("productTableBody");
  tableBody.innerHTML = "";

  products.forEach(product => {
    const row = document.createElement("tr");
    row.innerHTML = `
      <td>${product.productId}</td>
      <td>${product.productName}</td>
      <td>${product.productDescription}</td>
      <td>${product.productPrice}</td>
      <td>${product.productReleasedOn}</td>
      <td>
        <a href="edit-product.html?id=${product.productId}" class="btn btn-sm btn-primary">Edit</a>
        <button class="btn btn-sm btn-danger" onclick="deleteAndReload(${product.productId})">Delete</button>
      </td>`;
    tableBody.appendChild(row);
  });
}

async function deleteAndReload(id) {
  if (confirm("Are you sure you want to delete this product?")) {
    await deleteProduct(id);
    window.location.reload();
  }
}

function initSortUI() {
  const sortSelect = document.getElementById("sortSelect");
  const toggleOrderBtn = document.getElementById("toggleOrderBtn");

  // Event: Change column
  sortSelect.addEventListener("change", () => {
    currentSort.column = sortSelect.value;
    applySortAndRender();
  });

  // Event: Toggle ascending/descending
  toggleOrderBtn.addEventListener("click", () => {
    currentSort.ascending = !currentSort.ascending;
    toggleOrderBtn.textContent = currentSort.ascending ? "Ascending" : "Descending";
    applySortAndRender();
  });
}

function applySortAndRender() {
  const sorted = [...productsCache].sort((a, b) => {
    let valA = a[currentSort.column];
    let valB = b[currentSort.column];

    if (!isNaN(valA) && !isNaN(valB)) {
      valA = parseFloat(valA);
      valB = parseFloat(valB);
    } else if (isValidDate(valA) && isValidDate(valB)) {
      valA = new Date(valA);
      valB = new Date(valB);
    } else {
      valA = valA.toString().toLowerCase();
      valB = valB.toString().toLowerCase();
    }

    if (valA < valB) return currentSort.ascending ? -1 : 1;
    if (valA > valB) return currentSort.ascending ? 1 : -1;
    return 0;
  });

  renderTable(sorted);
}

function isValidDate(val) {
  return !isNaN(Date.parse(val));
}
